
import { SheetRundown } from '../Rundown'

// import * as cellData from './cellValues.json'

describe('RunningOrders', () => {

	it('should exist', () => {
		let a = new SheetRundown('test', 'some name', 'v0.2', 1, 2)
		expect(a).toBeTruthy()
	})
	// it('should correctly parse 2d cell array', () => {
	// 	let a = SheetRundown.fromSheetCells('sheetId123', 'name', (cellData as any).values)
	// 	expect(a).toBeTruthy()

	// 	expect(a.id).toEqual('sheetId123')
	// 	expect(a.name).toEqual('name')
	// 	expect(a.expectedStart).toEqual(new Date(1577685600000))
	// 	expect(a.expectedEnd).toEqual(new Date(1577685600000 + 30 * 60 * 1000))
	// 	expect(a.segments.length).toBe(10)
	// })
	// it('Diff undefined should return "Deleted" change', () => {
	// 	let a = SheetRundown.fromSheetCells('sheetId123', 'name', (cellData as any).values)
	// 	let diff = a.diff(undefined)
	// 	expect(diff.changeType).toEqual('Deleted')
	// })
	// it('Diff itself should return "Unchanged" change', () => {
	// 	let a = SheetRundown.fromSheetCells('sheetId123', 'name', (cellData as any).values)
	// 	let diff = a.diff(a)
	// 	expect(diff.changeType).toEqual('Unchanged')
	// 	expect(diff.sections.length).toEqual(0)
	// })
	// it('Diff identical should return "Unchanged" change', () => {
	// 	let a = SheetRundown.fromSheetCells('sheetId123', 'name', (cellData as any).values)
	// 	let b = SheetRundown.fromSheetCells('sheetId123', 'name', (cellData as any).values)
	// 	let diff = a.diff(b)
	// 	expect(diff.changeType).toEqual('Unchanged')
	// 	expect(diff.sections.length).toEqual(0) // Will not work right now as the id's are not set
	// })
	describe('#columnToLetter', () => {
		it('returns correct values', () => {
			expect(SheetRundown.columnToLetter(0)).toEqual('')
			expect(SheetRundown.columnToLetter(1)).toEqual('A')
			expect(SheetRundown.columnToLetter(2)).toEqual('B')
			expect(SheetRundown.columnToLetter(3)).toEqual('C')
			expect(SheetRundown.columnToLetter(4)).toEqual('D')
			expect(SheetRundown.columnToLetter(5)).toEqual('E')
			expect(SheetRundown.columnToLetter(6)).toEqual('F')
			expect(SheetRundown.columnToLetter(7)).toEqual('G')
			expect(SheetRundown.columnToLetter(8)).toEqual('H')
			expect(SheetRundown.columnToLetter(9)).toEqual('I')
			expect(SheetRundown.columnToLetter(10)).toEqual('J')
			expect(SheetRundown.columnToLetter(11)).toEqual('K')
			expect(SheetRundown.columnToLetter(12)).toEqual('L')
			expect(SheetRundown.columnToLetter(13)).toEqual('M')
			expect(SheetRundown.columnToLetter(14)).toEqual('N')
			expect(SheetRundown.columnToLetter(15)).toEqual('O')
			expect(SheetRundown.columnToLetter(16)).toEqual('P')
			expect(SheetRundown.columnToLetter(17)).toEqual('Q')
			expect(SheetRundown.columnToLetter(18)).toEqual('R')
			expect(SheetRundown.columnToLetter(19)).toEqual('S')
			expect(SheetRundown.columnToLetter(20)).toEqual('T')
			expect(SheetRundown.columnToLetter(21)).toEqual('U')
			expect(SheetRundown.columnToLetter(22)).toEqual('V')
			expect(SheetRundown.columnToLetter(23)).toEqual('W')
			expect(SheetRundown.columnToLetter(24)).toEqual('X')
			expect(SheetRundown.columnToLetter(25)).toEqual('Y')
			expect(SheetRundown.columnToLetter(26)).toEqual('Z')
			expect(SheetRundown.columnToLetter(27)).toEqual('AA')
			expect(SheetRundown.columnToLetter(28)).toEqual('AB')
			expect(SheetRundown.columnToLetter(29)).toEqual('AC')
			expect(SheetRundown.columnToLetter(30)).toEqual('AD')
			expect(SheetRundown.columnToLetter(31)).toEqual('AE')
			expect(SheetRundown.columnToLetter(32)).toEqual('AF')
			expect(SheetRundown.columnToLetter(33)).toEqual('AG')
			expect(SheetRundown.columnToLetter(34)).toEqual('AH')
			expect(SheetRundown.columnToLetter(35)).toEqual('AI')
			expect(SheetRundown.columnToLetter(36)).toEqual('AJ')
			expect(SheetRundown.columnToLetter(37)).toEqual('AK')
			expect(SheetRundown.columnToLetter(38)).toEqual('AL')
			expect(SheetRundown.columnToLetter(39)).toEqual('AM')
			expect(SheetRundown.columnToLetter(40)).toEqual('AN')
			expect(SheetRundown.columnToLetter(41)).toEqual('AO')
			expect(SheetRundown.columnToLetter(42)).toEqual('AP')
			expect(SheetRundown.columnToLetter(43)).toEqual('AQ')
			expect(SheetRundown.columnToLetter(44)).toEqual('AR')
			expect(SheetRundown.columnToLetter(45)).toEqual('AS')
			expect(SheetRundown.columnToLetter(46)).toEqual('AT')
			expect(SheetRundown.columnToLetter(47)).toEqual('AU')
			expect(SheetRundown.columnToLetter(48)).toEqual('AV')
			expect(SheetRundown.columnToLetter(49)).toEqual('AW')
			expect(SheetRundown.columnToLetter(50)).toEqual('AX')
			expect(SheetRundown.columnToLetter(51)).toEqual('AY')
			expect(SheetRundown.columnToLetter(52)).toEqual('AZ')
			expect(SheetRundown.columnToLetter(53)).toEqual('BA')
			expect(SheetRundown.columnToLetter(54)).toEqual('BB')
			expect(SheetRundown.columnToLetter(55)).toEqual('BC')
			expect(SheetRundown.columnToLetter(56)).toEqual('BD')
			expect(SheetRundown.columnToLetter(57)).toEqual('BE')
			expect(SheetRundown.columnToLetter(26 * 26 + 27)).toEqual('AAA')
			expect(SheetRundown.columnToLetter(26 * 26 * 27 + 27)).toEqual('AAAA')
		})
	})
})
